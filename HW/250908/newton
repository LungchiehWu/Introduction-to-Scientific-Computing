import numpy as np
import matplotlib.pyplot as plt

def divided_diff(x, y):
    n = len(y)
    dy = np.zeros([n, n])
    dy[:,0] = y
    for j in range(1, n):
        for i in range(n - j):
            dy[i][j] = (dy[i+1][j-1] - dy[i][j-1]) / (x[i+j] - x[i])
    return dy[0, :]

def newton_poly(x, y, x_new):
    coeffs = divided_diff(x, y)
    n = len(x)
    y_new = coeffs[n-1]
    for i in range(n - 2, -1, -1):
        y_new = y_new * (x_new - x[i]) + coeffs[i]
    return y_new

f = lambda x: np.sin(x)
x = np.linspace(0, 1, 10)
y = f(x)
x_plot = np.linspace(0, 1, 100)

y_newton = newton_poly(x, y, x_plot)
plt.figure(figsize=(8, 6))
plt.plot(x_plot, f(x_plot), 'k-')
plt.plot(x, y, 'ro')
plt.plot(x_plot, y_newton, 'b--')
plt.grid(True)
plt.show()
